version: "3.8"

# This compose file arranges to 'go run' the nodes using bind mounted sources.
# To run any node with the latest code changes, just restart it - there is no
# need to build images for each of the nodes. The debug service exists to build
# the image that is used to host the go tool chain. It only needs to be built
# if the base go lang version is updated or delve needs to be upgraded.
#
x-node-env-defaults:
  &node-env-defaults
  GOCACHE: /tmp/go-cache
  NETWORKID: "53456"
  PRIVATE_CONFIG: ignore
  RORORO_OPTS: "--rororo.candidates 3 --rororo.endorsers 5 --rororo.endorsersquorum 2"
  DISCOVERY_OPTS: "--nodiscover"
  P2P_PORT: 7200
  RPC_OPTS: "\
   --allow-insecure-unlock \
   --rpc \
   --rpcaddr 0.0.0.0 \
   --rpcport 8300 \
   --rpcapi 'admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum' \
   --rpccorsdomain '*' \
   --rpcvhosts '*'"
  WS_OPTS: "--ws --wsport 8400 --wsorigins '*'"
  MINER_OPTS: "\
   --miner.gastarget 3000000000 \
   --mine --minerthreads 1 --miner.etherbase 0xfddc8ec119e799a3fb2c3455cabe72a1bd59fb5a"
  # MINER_OPTS: ""
  LOG_OPTS: "--debug --vmodule 'p2p/*=3,eth/*=7,eth/downloader/*=3,eth/fetcher/*=3,miner/*=7' --verbosity 7"

  # Different default ways to start geth
  #
  # For debugging
  # RUN_GETH_CMD: "/dbg/dlv debug  --headless --listen=:2345 --log --api-version=2 github.com/ethereum/go-ethereum/cmd/geth -- "
  # --accept-multiclient --continue

  # From live source
  RUN_GETH_CMD: go run github.com/ethereum/go-ethereum/cmd/geth

  # From pre-built binary
  # RUN_GETH_CMD: /go/bin/geth

x-node-defaults:
  &node-defaults
  image: rororo-delve:dev
  volumes:
    - go-cache-volume:/tmp/go-cache
    - go-pkg-volume:/go/pkg
    # These variables are defined in the .env file
    - ${RORORO_SRC}:/go/src
    - ${RORORO_NODE_ROOT}:/nodes

  ports:
    - "7200"
    - "8300"
    - "8400"

  entrypoint:
    - /bin/sh
    - -cx
    - |
      # while true; do sleep 1; echo sleeping; done
      $${RUN_GETH_CMD} \
          $${RORORO_OPTS} \
          --networkid $${NETWORKID} \
          $${DISCOVERY_OPTS} \
          --port $${P2P_PORT} \
          --nodekey key \
          --datadir data \
          --gcmode archive  --syncmode full \
          --nousb \
          $${MINER_OPTS} \
          $${RPC_OPTS} \
          $${LOG_OPTS}

services:
  debug:
    image: rororo-delve:dev
    build:
      context: .
      dockerfile: Dockerfile-delve
  gethbuild:
    build: .
    volumes:
      - go-cache-volume:/tmp/go-cache
      - go-pkg-volume:/go/pkg
      # These variables are defined in the .env file
      - ${RORORO_SRC}:/go/src
      - ${RORORO_NODE_ROOT}:/nodes



  node0:
    << : *node-defaults
    # --accept-multiclient --continue
    working_dir: /nodes/node0
    environment:
      << : *node-env-defaults
      # un comment the following to attach to the node from a vscode remote
      # debug session
      # RUN_GETH_CMD: "/dbg/dlv debug --headless --listen=:2345 --log --api-version=2 github.com/ethereum/go-ethereum/cmd/geth -- "
    ports:
      - "8545:8300"
      - "7200:7200"

  node1:
    << : *node-defaults
    working_dir: /nodes/node1
    environment:
      << : *node-env-defaults
      # RUN_GETH_CMD: "/dbg/dlv debug --headless --listen=:2345 --log --api-version=2 github.com/ethereum/go-ethereum/cmd/geth -- "
    ports:
      # - "2345:2345"
      - "7200"
      - "8300"

  node2:
    << : *node-defaults
    environment: *node-env-defaults
    working_dir: /nodes/node2

  node3:
    << : *node-defaults
    environment: *node-env-defaults
    working_dir: /nodes/node3

  # The tactic of using 'go run' so that it is fast to iterate code changes
  # does not scale to much more than 5 nodes - the go linker typically gets OOM
  # killed on a mac if they are all started together. And starting 5+
  # individually is a little tiresome.
  #node4:
  #  << : *node-defaults
  #  environment: *node-env-defaults
  #  working_dir: /nodes/node4

  #node5:
  #  << : *node-defaults
  #  environment: *node-env-defaults
  #  working_dir: /nodes/node5

volumes:
  go-pkg-volume:
  go-cache-volume:
