interpreter: bash -c

options:

  workdir:
    usage: >
      The common root for everything we need. All defaults are relative to this
    environment: PWD

  gopath:
    environment: GOPATH
    default:
      command: echo ${workdir}/gopath

  node:
    default: "0"
    short: "n"

  nodesdir:
    usage: "parent dir for all node[n] --datadir's"
    short: "w"
    default:
      command: echo ${workdir}/nodes

name: rrrdev
tasks:

  rawtx:
    usage: "generate a raw transaction (of arbitrary kind)"
    options:
      nonce:
        default: "0"
      key:
        default: ${workdir}/nodes/node0/genesis-wallet.key

    args:
      contract_json:
    run:
      - command:
          exec: |
            set -e
            scriptdir=$(pwd)
            cd ${workdir}

            # SimpleStorage needs support for contract constructor parameters
            # encode truffle/build/contracts/SimpleStorage.json
            python3 ${scriptdir}/rawtx.py -v \
              encode ${contract_json} \
              --nonce ${nonce} \
              -k ${key}

  enrol:
    usage: "enrol id (try keyid to get the argument)"
    args:
      nodeid:
        usage: "hex encoding of the un compressed ecdsa secp256k1 public node key. try keyid command"
    options:
      host:
        default: 127.0.0.1
    run:
      - command:
          exec: |
            curl --location --request POST 'http://${host}:8545/' \
              --header 'Content-Type: application/json' \
              --data-raw '{
              	"jsonrpc":"2.0",
              	"method":"rrr_queueEnrolment",
              	"params":["${nodeid}"],
              	"id":1
              }'

  pendingenrol:
    args:
      nodeid:
        usage: "hex encoding of the un compressed ecdsa secp256k1 public node key. try keyid command"
    run:
      - command:
          exec: |
            curl --location --request POST 'http://127.0.0.1:8545/' \
              --header 'Content-Type: application/json' \
              --data-raw '{
              	"jsonrpc":"2.0",
              	"method":"rrr_isEnrolmentPending",
              	"params":["${nodeid}"],
              	"id":1
              }'

  attach:
    usage: "geth attach using docker exec go run"

    run:
      - command:
          exec: |
            set -e
            docker exec -it rrr_node${node}_1 \
              geth attach /nodes/node${node}/data/geth.ipc

  gethjex:
    usage: "geth attach --exec using docker exec go run"
    options:
      node:
        default: "1"
        short: "n"
    args:
      exec:
    run:
      - command:
          exec: |
            set -e
            docker exec -it rrr_node${node}_1 \
              go run github.com/ethereum/go-ethereum/cmd/geth \
              attach /nodes/node${node}/data/geth.ipc --exec "${exec}"

  address:
    usage: "get the wallet address from a key"
    options:
      key:
        default: nodes/node0/genesis-wallet.key
        short: "k"
      hex_key:
        usage: "hex format key file"
        short: "x"
      hex_pub:
        usage: "hex format public key"

    run:
      - command:
          exec: |
            set -e
            cat <<PYEND | python
            import secrets, coincurve, sha3

            if "${key}" != "":
                pub = coincurve.PublicKey.from_valid_secret(open("${key}", "rb").read())
                addr = sha3.keccak_256(pub.format(compressed=False)[1:]).digest()[-20:].hex()
                print(f"key: {addr}")
            PYEND
  wallet:
    usage: "create a wallet (python deps: sha3, coincurve)"
    options:
      name:
        usage: "basename for wallet files .key, .pub and .addr"
        default: genesis-wallet
    run:
      - command:
          exec: |
            set -e

            cd ${workdir}

            cat <<PYEND | python
            import secrets, coincurve, sha3

            key = sha3.keccak_256(secrets.token_bytes(32)).digest()
            keyhex = key.hex()
            pub = coincurve.PublicKey.from_valid_secret(key).format(compressed=False)[1:]
            addr = "0x" + sha3.keccak_256(pub).digest()[-20:].hex()

            for var, mode in [("keyhex", ""), ("key", "b"), ("pub", "b"), ("addr", "")]:
                with open(f"${name}.{var}", "w" + mode) as f:
                    f.write(locals()[var])

            print(addr)
            PYEND

  keyid:
    usage: "nodeid from node privatekey"
    args:
      key:
    run:
      - command:
          exec: |
            set -e

            cd ${workdir}

            cat <<PYEND | python3
            import coincurve, sha3

            key = open("${key}", 'r').read()
            key = coincurve.PrivateKey.from_hex(key[:-1])
            pub = coincurve.PublicKey.from_valid_secret(key.secret).format(compressed=False)[1:]
            print(sha3.keccak_256(pub).digest().hex())
            PYEND

  import-wallet:
    usage: "imports the genesis account so unsigned transactions can be issued via console and rpc"
    options:
      password:
        usage: "set the password"
        short: "p"
        default: "genesis"
      name:
        usage: "basename for wallet files .key, .pub and .addr"
        default: genesis-wallet
    run:
      - command:
          exec: |
            set -e
            export GOPATH=${gopath}
            NODE_DIR=${nodesdir}/node${node}

            mkdir -p ${NODE_DIR}/data/keystore
            export PRIVATE_CONFIG=ignore
            echo "${password}" > ${NODE_DIR}/${name}.password
            go run github.com/ethereum/go-ethereum/cmd/geth \
              --password ${NODE_DIR}/${name}.password \
              --datadir=${NODE_DIR}/data \
              --keystore=${NODE_DIR}/data/keystore \
              account import ${NODE_DIR}/${name}.keyhex
