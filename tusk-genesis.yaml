interpreter: bash -c
name: rrr-gen
options:

  workdir:
    usage: >
      The common root for everything we need. All defaults are relative to this
    environment: PWD

  node0dir:
    usage: node0's --datadir's, used as source for some default configuration
    default:
      command: echo ${workdir}/nodes/node0

  node:
    default: "0"
    short: "n"

  nodesdir:
    usage: "parent dir for all node[n] --datadir's"
    short: "w"
    default:
      command: echo ${workdir}/nodes

  quorumdir:
    default:
      command: echo ${workdir}/quorum

  geth:
    default: "go run github.com/ethereum/go-ethereum/cmd/geth"

tasks:


  init-all:
    usage: "genesis for all nodes in range [start - end]"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"

    run:
      - command:
          exec: |
            set -e

            RRR_DIR=$(pwd)

            cd ${workdir}

            for n in $(seq ${start} ${end}); do
              tusk -q -f $RRR_DIR/tusk-genesis.yaml genesis --workdir ${workdir} -n ${n} -f
              mkdir -p ${nodesdir}/node${n}/data/geth
            done

  reset-all:
    usage: "run geth removedb on all nodes"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"

    run:
      - command:
          exec: |
            set -e
            cd ${quorumdir}
            for n in $(seq ${start} ${end}); do
              ${geth} removedb --datadir ${nodesdir}/node${n}/data
            done

  keys:
    usage: "generate a range of keys"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"
    run:
      - command:
          exec: |
            set -e

            NODES_DIR=${nodesdir}
            for n in $(seq ${start} ${end}); do
              tusk -q -f tusk-genesis.yaml nodekey --workdir=${workdir} -n ${n} -f
              ALPHA=$(tusk -q -f tusk-genesis.yaml alpha --workdir ${workdir} -j $NODES_DIR/node${n}/key)
              echo $ALPHA > $NODES_DIR/node${n}/alpha.json
            done

  alphas:
    usage: "generate the alpha contributions for the genesis vrf seed"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"
    run:
      - command:
          exec: |
            set -e

            NODES_DIR=${nodesdir}
            for n in $(seq ${start} ${end}); do

              ALPHA=$(tusk -q -f tusk-genesis.yaml alpha --workdir ${workdir} -j $NODES_DIR/node${n}/key)
              echo $ALPHA > $NODES_DIR/node${n}/alpha.json
              echo "Wrote $NODES_DIR/node${n}/alpha.json"
            done

  extra:
    usage: "generate the extradata hex string for the genesi document"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"

      staticip:
        type: bool
        default: false
      staticoffset:
        type: int
        default: 10
      staticprefix:
        # 172.19.0.first + ${start, end}
        default: "172.19.0."
      force:
        usage: "Force delete of existing datadir"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            NODES_DIR=${nodesdir}

            ALPHAS=""
            for n in $(seq ${start} ${end}); do
              ALPHAS="$ALPHAS ${nodesdir}/node${n}/alpha.json"
            done

            cd ${workdir}/go-rrr/tools

            go run cmd/rrrctl/main.go genextra \
              --showids --datadir ${node0dir} \
                $ALPHAS


  genesis:
    usage: "do genesis (using go run and sources in quorum-rororo)"
    options:
      node:
        default: "0"
        short: "n"
      datadir:
        usage: "geth init --datadir, defaults to nodesdir/node0/data"
        default:
          command: echo ${nodesdir}/node${node}/data
        short: "d"
      genesis:
        usage: "genesis.json file, defaults to datadir/../gensis.json"
        short: "G"
        default:
          command: echo ${node0dir}/genesis.json
      force:
        usage: "Force delete of existing datadir"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            DATA_DIR=${datadir}
            cd ${quorumdir}

            if ${force}; then echo "force deleting: ${DATA_DIR}"; rm -rf ${DATA_DIR}; fi

            [ -d ${DATA_DIR} ] && echo "datadir exists, -f to force delete" && exit 1

            mkdir -p ${DATA_DIR}

            ${geth} --datadir=${DATA_DIR} init ${genesis}

            echo "${DATA_DIR} from ${genesis}"

  nodekey:
    usage: "generate node key (using go run and sources in quorum-rororo)"
    options:
      node:
        usage: "node number"
        short: "n"
        default: "0"

      key:
        usage: "output file name or '/dev/stdout'"
        default: "key"
      enode:
        usage: "output file name or '/dev/stdout'"
        default: "enode"

      force:
        usage: "Force overwrite of existing"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            cd ${quorumdir}

            NODES_DIR=${nodesdir}

            if [[ "${key}" != "/dev/stdout" ]] || [[ "${enode}" != "/dev/stdout" ]]; then
              [ -n "${node}" ] && NODE_DIR="$NODES_DIR/node${node}" || NODE_DIR="$NODES_DIR/node0"
              mkdir -p ${NODE_DIR} && cd ${NODE_DIR}
            fi

            # Note that [ -f /dev/stdout ] is FALSE, so we don't need to guard
            # against deleting it

            if ${force}; then
              [ -f ${key} ] && echo "force deleting: ${key}" && rm -f ${key}
              [ -f ${enode} ] && echo "force deleting: ${enode}" && rm -f ${enode}
            fi
            [[ -f "${key}" || -f "${enode}" ]] && echo "key or enode exist: ${key}, ${enode}. -f to force delete" && exit 1

            KEY=$(go run github.com/ethereum/go-ethereum/cmd/bootnode --genkey /dev/stdout)
            ENODE=$(echo $KEY | go run github.com/ethereum/go-ethereum/cmd/bootnode --nodekey /dev/stdin --writeaddress)

            echo $KEY > ${key} && echo "wrote: ${key}"
            echo $ENODE > ${enode} && echo "wrote: ${enode}"

            pwd

  alpha:
    usage: "alpha contribution from node private key file"
    options:
      json:
        short: "j"
        type: bool

    args:
      key:
    run:
      - command:
          exec: |
            set -e

            cd ${workdir}

            cat <<PYEND | python3
            import coincurve, sha3, secrets

            key = open("${key}", 'r').read()
            key = coincurve.PrivateKey.from_hex(key[:-1])
            rawpub = coincurve.PublicKey.from_valid_secret(key.secret).format(compressed=False)
            nodeid = sha3.keccak_256(rawpub[1:]).digest()
            # This nodes contribution to the genesis seed alpha
            alpha = secrets.token_bytes(32)
            sig = key.sign_recoverable(alpha, hasher=None)
            if "${json}" != "false":
              print(f'{{"nodeid":"0x{nodeid.hex()}", "alpha": "0x{alpha.hex()}", "sig": "0x{sig.hex()}"}}')
            else:
              print(f"0x{rawpub.hex()} 0x{alpha.hex()} 0x{sig.hex()}")
            PYEND
