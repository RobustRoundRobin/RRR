interpreter: bash -c
name: rrr-gen
options:

  workdir:
    usage: >
      The common root for everything we need. All defaults are relative to this
    environment: PWD

  node0dir:
    usage: node0's --datadir's, used as source for some default configuration
    default:
      command: echo ${workdir}/nodes/node0

  node:
    default: "0"
    short: "n"

  nodesdir:
    usage: "parent dir for all node[n] --datadir's"
    short: "w"
    default:
      command: echo ${workdir}/nodes

  gopath:
    environment: GOPATH
    default:
      command: echo ${workdir}/gopath

  geth:
    default: "go run github.com/ethereum/go-ethereum/cmd/geth"

tasks:


  copy-static:
    usage: "copy the current static-nodes.json into all the node directories (unconditionaly)"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "11"

    run:
      - command:
          exec: |
            set -e

            RRR_DIR=$(pwd)

            cd ${workdir}

            for n in $(seq ${start} ${end}); do
              cp -v $RRR_DIR/static-nodes.json ${nodesdir}/node${n}/data/geth/
            done

  init-all:
    usage: "genesis for all nodes in range [start - end]"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "11"

    run:
      - command:
          exec: |
            set -e

            RRR_DIR=$(pwd)

            cd ${workdir}

            for n in $(seq ${start} ${end}); do
              tusk -q -f $RRR_DIR/tusk-genesis.yaml genesis --workdir ${workdir} -n ${n} -f
              mkdir -p ${nodesdir}/node${n}/data/geth
              # cp $RRR_DIR/static-nodes.json ${nodesdir}/node${n}/data/geth/
            done

  reset-all:
    usage: "run geth removedb on all nodes"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "11"

    run:
      - command:
          exec: |
            set -e
            cd ${workdir}
            export GOPATH=${gopath}

            for n in $(seq ${start} ${end}); do
              ${geth} removedb --datadir ${nodesdir}/node${n}/data
            done

  keys:
    usage: "generate a range of keys"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "11"
    run:
      - command:
          exec: |
            set -e
            for n in $(seq ${start} ${end}); do
              tusk -q -f tusk-genesis.yaml nodekey --workdir=${workdir} -n ${n} -f
            done
  extra:
    usage: "generate the extradata hex string for the genesi document"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "11"

      staticip:
        type: bool
        default: false
      staticoffset:
        type: int
        default: 10
      staticprefix:
        # 172.19.0.first + ${start, end}
        default: "172.19.0."
      force:
        usage: "Force delete of existing datadir"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            export GOPATH=${gopath}

            NODES_DIR=${nodesdir}

            if ${force}; then echo "force deleting $(pwd)/static-nodes.json"; rm -f $(pwd)/static-nodes.json; fi
            [ -f $(pwd)/static-nodes.json ] && echo "$(pwd)/static-nodes.json exists, -f to force delete" && exit 1

            endend=$((${end} - 1))

            # go-ethereum's support for parsing enode urls (which we use for
            # convenience) also, perplexingly, resolves the dns names at the
            # time it parses the url. For docker compose setup, and for cluster
            # setup, this is quite inconvenient - so we generate two 'static'
            # node configuration files: one so that we can generate the extra
            # data and another that we actually use. Only the host names are
            # different and this does not affect the extraData
            #
            rm -rf static-nodes.json static-nodes-loopback.json

            echo "[" | tee -a static-nodes-loopback.json
            for n in $(seq ${start} ${endend}); do
              printf "\"enode://$(cat ${nodesdir}/node${n}/enode)@127.0.0.1:7200\",\n" | tee -a static-nodes-loopback.json
            done
            printf "\"enode://$(cat ${nodesdir}/node${end}/enode)@127.0.0.1:7200\"\n" | tee -a static-nodes-loopback.json
            echo "]" | tee -a static-nodes-loopback.json

            hoststem=node
            hoststem=${staticprefix}

            echo "[" | tee -a static-nodes.json
            for n in $(seq ${start} ${endend}); do
              sub=${n}
              sub=$((${staticoffset} + ${n}))
              printf "\"enode://$(cat ${nodesdir}/node${n}/enode)@${hoststem}${sub}:7200\",\n" | tee -a static-nodes.json
            done
            sub=$((${staticoffset} + ${end}))
            printf "\"enode://$(cat ${nodesdir}/node${end}/enode)@${hoststem}${sub}:7200\"\n" | tee -a static-nodes.json
            echo "]" | tee -a static-nodes.json

            # attempts to resolve the node's and that doesn't work out side of
            # compose
            go run github.com/ethereum/go-ethereum/cmd/rrr genextra --showids --datadir ${node0dir} $(pwd)/static-nodes-loopback.json


  genesis:
    usage: "do genesis (using go run and sources in quorum-rororo)"
    options:
      node:
        default: "0"
        short: "n"
      datadir:
        usage: "geth init --datadir, defaults to nodesdir/node0/data"
        default:
          command: echo ${nodesdir}/node${node}/data
        short: "d"
      genesis:
        usage: "genesis.json file, defaults to datadir/../gensis.json"
        short: "G"
        default:
          command: echo ${node0dir}/genesis.json
      force:
        usage: "Force delete of existing datadir"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            cd ${workdir}
            export GOPATH=${gopath}
            DATA_DIR=${datadir}

            if ${force}; then echo "force deleting: ${DATA_DIR}"; rm -rf ${DATA_DIR}; fi

            [ -d ${DATA_DIR} ] && echo "datadir exists, -f to force delete" && exit 1

            mkdir -p ${DATA_DIR}

            ${geth} --datadir=${DATA_DIR} init ${genesis}

            echo "${DATA_DIR} from ${genesis}"

  nodekey:
    usage: "generate node key (using go run and sources in quorum-rororo)"
    options:
      node:
        usage: "node number"
        short: "n"
        default: "0"

      key:
        usage: "output file name or '/dev/stdout'"
        default: "key"
      enode:
        usage: "output file name or '/dev/stdout'"
        default: "enode"

      force:
        usage: "Force overwrite of existing"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            cd ${workdir}

            export GOPATH=${gopath}
            NODES_DIR=${nodesdir}

            export GOPATH=$GOPATH

            if [[ "${key}" != "/dev/stdout" ]] || [[ "${enode}" != "/dev/stdout" ]]; then
              [ -n "${node}" ] && NODE_DIR="$NODES_DIR/node${node}" || NODE_DIR="$NODES_DIR/node0"
              mkdir -p ${NODE_DIR} && cd ${NODE_DIR}
            fi

            # Note that [ -f /dev/stdout ] is FALSE, so we don't need to guard
            # against deleting it

            if ${force}; then
              [ -f ${key} ] && echo "force deleting: ${key}" && rm -f ${key}
              [ -f ${enode} ] && echo "force deleting: ${enode}" && rm -f ${enode}
            fi
            [[ -f "${key}" || -f "${enode}" ]] && echo "key or enode exist: ${key}, ${enode}. -f to force delete" && exit 1

            KEY=$(go run github.com/ethereum/go-ethereum/cmd/bootnode --genkey /dev/stdout)
            ENODE=$(echo $KEY | go run github.com/ethereum/go-ethereum/cmd/bootnode --nodekey /dev/stdin --writeaddress)
            echo $KEY > ${key} && echo "wrote: ${key}"
            echo $ENODE > ${enode} && echo "wrote: ${enode}"
            pwd
