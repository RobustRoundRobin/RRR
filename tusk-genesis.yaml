interpreter: bash -c
name: rrr-gen
options:

  workdir:
    usage: >
      The common root for everything we need. All defaults are relative to this
    environment: PWD

  node0dir:
    usage: node0's --datadir's, used as source for some default configuration
    default:
      command: echo ${workdir}/nodes/node0

  node:
    default: "0"
    short: "n"

  nodesdir:
    usage: "parent dir for all node[n] --datadir's"
    short: "w"
    default:
      command: echo ${workdir}/nodes

  quorumdir:
    default:
      command: echo ${workdir}/quorum

  geth:
    # default: "go run github.com/ethereum/go-ethereum/cmd/geth"
    default: "docker run --rm -v ${workdir}:${workdir} geth-rrr:latest --nousb"
  rrrctl:
    # default: "go run cmd/rrrctl/main.go"
    default: "docker run --rm -v ${workdir}:${workdir} rrrctl:latest"

tasks:


  init-all:
    usage: "genesis for all nodes in range [start - end]"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"

    run:
      - command:
          exec: |
            set -e

            RRR_DIR=$(pwd)

            cd ${workdir}

            tusk -q -f $RRR_DIR/tusk-genesis.yaml gendoc \
              --workdir ${workdir} \
              --start ${start} --end ${end} | tee ${nodesdir}/node0/genesis.json


            for n in $(seq ${start} ${end}); do
              tusk -q -f $RRR_DIR/tusk-genesis.yaml genesis --workdir ${workdir} -n ${n} -f
              mkdir -p ${nodesdir}/node${n}/data/geth
            done

  all:
    usage: "full reset and re-genesis, including key generation and alpha contribution"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"

    run:
      - command:
          exec: |
            set -e

            RRR_DIR=$(pwd)

            cd ${workdir}
            for n in $(seq ${start} ${end}); do
              rm -rf ${nodesdir}/node${n}
            done

            tusk -q -f $RRR_DIR/tusk-genesis.yaml keys \
              --workdir ${workdir} \
              --start ${start} --end ${end}

            tusk -q -f $RRR_DIR/tusk-genesis.yaml alphas \
              --workdir ${workdir} \
              --start ${start} --end ${end}

            tusk -q -f $RRR_DIR/tusk-genesis.yaml gendoc \
              --workdir ${workdir} \
              --start ${start} --end ${end} | tee ${nodesdir}/node0/genesis.json

            for n in $(seq ${start} ${end}); do
              tusk -q -f $RRR_DIR/tusk-genesis.yaml genesis \
                --workdir ${workdir} \
                --node ${n} --genesis ${nodesdir}/node0/genesis.json -f
            done

            RRR_BOOTNODE_PUB=$(cat ${nodesdir}/node0/enode)
            cat <<END > $RRR_DIR/compose/.env
            COMPOSE_PROJECT_NAME=rrr
            RRR_SRC=../..
            RRR_BIN=../../bin
            RRR_NODE_ROOT=../../nodes
            RRR_BOOTNODE_IP=172.19.0.10
            RRR_BOOTNODE_PUB=${RRR_BOOTNODE_PUB}
            RRR_ETHERBASE=0xfddc8ec119e799a3fb2c3455cabe72a1bd59fb5a
            END

  keys:
    usage: "generate a range of keys"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"
    run:
      - command:
          exec: |
            set -e

            NODES_DIR=${nodesdir}
            for n in $(seq ${start} ${end}); do
              tusk -q -f tusk-genesis.yaml nodekey --workdir=${workdir} -n ${n} -f
              ALPHA=$(tusk -q -f tusk-genesis.yaml alpha --workdir ${workdir} -j $NODES_DIR/node${n}/key)
              echo $ALPHA > $NODES_DIR/node${n}/alpha.json
            done

  alphas:
    usage: "generate the alpha contributions for the genesis vrf seed"
    options:
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"
    run:
      - command:
          exec: |
            set -e

            NODES_DIR=${nodesdir}
            for n in $(seq ${start} ${end}); do

              ALPHA=$(tusk -q -f tusk-genesis.yaml alpha --workdir ${workdir} -j $NODES_DIR/node${n}/key)
              echo $ALPHA > $NODES_DIR/node${n}/alpha.json
              echo "Wrote $NODES_DIR/node${n}/alpha.json"
            done

  gendoc:
    usage: "create a genesis document from a template doc and alpha contributions from indexed node folders"
    options:
      account:
        usage: "the wallet to allocate the genesis balance to - suggest you change the default!"
        short: "w"
        default: "0x5b38ab0d3a31efeffd3a3ac88421816ca227432c"
      balance: 
        usage: "The balance to allocate to the genesis-account"
        default: "1000000000000000000000000000"
      template:
        usage: "template file to use. by default genesis.json from this repo is used"
        short: "g"
        default: ""
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"
    run:
      - command:
          exec: |
            set -e

            export EXTRADATA=$(tusk -q -f $(pwd)/tusk-genesis.yaml extra --workdir ${workdir} -s ${start} -e ${end})

            cat <<PYEND | python3
            import os
            import json
            from pathlib import Path
            templatefile = "${template}"
            if not templatefile:
                templatefile = Path("genesis.json").resolve()
            else:
                templatefile = Path("${workdir}").joinpath(templatefile)

            o = json.load(open(templatefile))
            try:
                del o["alloc"]["0x0000000000000000000000000000000000000000"]
            except KeyError:
                pass
            o["alloc"]["${account}"] = dict(balance="${balance}")

            extraData = os.environ["EXTRADATA"]
            if not extraData.startswith("0x"):
                extraData = "0x" + extraData
            o["extraData"] = extraData
            print(json.dumps(o, indent=2, sort_keys=True))
            PYEND


  extra:
    usage: "generate the extradata hex string for the genesi document"
    options:
      showids:
        short: "i"
        type: bool
      start:
        short: "s"
        default: "0"
      end:
        short: "e"
        default: "14"

    run:
      - command:
          exec: |
            set -ex

            SHOWIDS=""
            ${showids} && SHOWIDS="--showids"

            NODES_DIR=${nodesdir}

            ALPHAS=""
            for n in $(seq ${start} ${end}); do
              ALPHAS="$ALPHAS ${nodesdir}/node${n}/alpha.json"
            done

            cd ${workdir}/go-rrr/tools

            ${rrrctl} genextra \
              ${SHOWIDS} --datadir ${node0dir} $ALPHAS


  genesis:
    usage: "do genesis (using go run and sources in quorum-rororo)"
    options:
      node:
        default: "0"
        short: "n"
      datadir:
        usage: "geth init --datadir, defaults to nodesdir/node0/data"
        default:
          command: echo ${nodesdir}/node${node}/data
        short: "d"
      genesis:
        usage: "genesis.json file, defaults to datadir/../gensis.json"
        short: "G"
        default:
          command: echo ${node0dir}/genesis.json
      force:
        usage: "Force delete of existing datadir"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            DATA_DIR=${datadir}
            cd ${quorumdir}

            if ${force}; then echo "force deleting: ${DATA_DIR}"; rm -rf ${DATA_DIR}; fi

            [ -d ${DATA_DIR} ] && echo "datadir exists, -f to force delete" && exit 1

            mkdir -p ${DATA_DIR}

            ${geth} --datadir=${DATA_DIR} init ${genesis}

            echo "${DATA_DIR} from ${genesis}"

  nodekey:
    usage: "generate node key (using go run and sources in quorum-rororo)"
    options:
      node:
        usage: "node number"
        short: "n"
        default: "0"

      key:
        usage: "output file name or '/dev/stdout'"
        default: "key"
      enode:
        usage: "output file name or '/dev/stdout'"
        default: "enode"

      force:
        usage: "Force overwrite of existing"
        type: bool
        short: "f"

    run:
      - command:
          exec: |
            set -e

            cd ${quorumdir}

            NODES_DIR=${nodesdir}

            [ -n "${node}" ] && NODE_DIR="$NODES_DIR/node${node}" || NODE_DIR="$NODES_DIR/node0"
            mkdir -p ${NODE_DIR} && cd ${NODE_DIR}

            # Note that [ -f /dev/stdout ] is FALSE, so we don't need to guard
            # against deleting it

            if ${force}; then
              [ -f ${key} ] && echo "force deleting: ${key}" && rm -f ${key}
              [ -f ${enode} ] && echo "force deleting: ${enode}" && rm -f ${enode}
            fi
            [[ -f "${key}" || -f "${enode}" ]] && echo "key or enode exist: ${key}, ${enode}. -f to force delete" && exit 1

            cat <<PYEND | python3
            import os, secrets
            from sha3 import keccak_256
            from coincurve import PublicKey, PrivateKey

            key = PrivateKey()
            pub = key.public_key.format(compressed=False)[1:]
            with open("${key}", "w") as f:
                f.write(key.to_hex())
                print(f"wrote: {os.getcwd()}/" + "${key}")
            with open("${enode}", "w") as f:
                f.write(pub.hex())
                print(f"wrote: {os.getcwd()}/" + "${enode}")
            PYEND

  alpha:
    usage: "alpha contribution from node private key file"
    options:
      json:
        short: "j"
        type: bool

    args:
      key:
    run:
      - command:
          exec: |
            set -e

            cd ${workdir}

            cat <<PYEND | python3
            import coincurve, sha3, secrets

            key = open("${key}", 'r').read().strip()  # deal with newlines at end of file
            key = coincurve.PrivateKey.from_hex(key)
            rawpub = coincurve.PublicKey.from_valid_secret(key.secret).format(compressed=False)
            nodeid = sha3.keccak_256(rawpub[1:]).digest()
            # This nodes contribution to the genesis seed alpha
            alpha = secrets.token_bytes(32)
            sig = key.sign_recoverable(alpha, hasher=None)
            if "${json}" != "false":
              print(f'{{"nodeid":"0x{nodeid.hex()}", "alpha": "0x{alpha.hex()}", "sig": "0x{sig.hex()}"}}')
            else:
              print(f"0x{rawpub.hex()} 0x{alpha.hex()} 0x{sig.hex()}")
            PYEND
