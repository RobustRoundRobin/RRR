apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node
  labels:
    app.kubernetes.io/name: node
    app.kubernetes.io/part-of: rrrnet
spec:
  selector:
    matchLabels:
      app: node
  serviceName: node

  replicas: 10
  volumeClaimTemplates:
  - metadata:
      name: rrrnode-pv
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 4Gi
  template:
    metadata:
      labels:
        app: node
        # Pod template's label selector
        #skaffold.dev/run-id: static
        #app.kubernetes.io/managed-by: skaffold
        app.kubernetes.io/part-of: rrrnet
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            # Node selector to put the workload on *any* worker pool node.
            nodeSelectorTerms:
            - matchExpressions:
              - key: cloud.google.com/gke-nodepool
                operator: In
                values:
                - work-pool
      serviceAccountName: quorum-node-sa
      terminationGracePeriodSeconds: 10
      volumes:
        - name: rrrnet-opts
          configMap:
            name: rrrnet-opts
        - name: genesis
          configMap:
            name: genesis

      containers:
      - name: geth-rrr
        image: eu.gcr.io/fetlar/geth-rrr:fetlar-latest
        imagePullPolicy: Always
        volumeMounts:
          - name: rrrnode-pv
            mountPath: /var/lib/quorum
          - name: genesis
            mountPath: /etc/config/genesis
        env:
          - name: NUM_BOOTNODES
            value: "2"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NETWORKID
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: NETWORKID
          - name: RRR_OPTS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: RRR_OPTS
          - name: RPC_APIS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: RPC_APIS
          - name: SYNC_OPTS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: SYNC_OPTS
          - name: PRIVATE_CONFIG
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: PRIVATE_CONFIG
          - name: P2P_PORT
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: P2P_PORT
          - name: WS_OPTS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: WS_OPTS
          - name: RPC_OPTS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: RPC_OPTS
          - name: MINER_OPTS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: MINER_OPTS
          - name: LOG_OPTS
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: LOG_OPTS
        command:
          - sh
        args:
          - -cx
          - |
            set -e
            cd /var/lib/quorum/node

            BOOTNODES=$(cat BOOTNODES)

            NAT_OPTS="--nat=none"
            DISCOVERY_OPTS="--netrestrict=${POD_IP}/16 --bootnodes=${BOOTNODES}"

            # this is the genesis account
            ETHERBASE="b5983bf72a55b48d302638da5292f60f93597d96"

            PRIVATE_CONFIG=ignore geth \
                ${RRR_OPTS} \
                --networkid ${NETWORKID} \
                ${NAT_OPTS} ${DISCOVERY_OPTS} \
                --port ${P2P_PORT} \
                --nodekey /var/lib/quorum/node/geth/nodekey \
                --datadir /var/lib/quorum/node \
                --gcmode archive  --syncmode full \
                --nousb \
                --rpcapi "rrr,admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum" \
                ${MINER_OPTS} --miner.etherbase ${ETHERBASE} \
                ${RPC_OPTS} \
                ${LOG_OPTS}

      initContainers:
      - name: chaininit
        image: eu.gcr.io/fetlar/geth-rrr:fetlar-latest
        imagePullPolicy: Always
        volumeMounts:
          - name: rrrnode-pv
            mountPath: /var/lib/quorum
          - name: genesis
            mountPath: /etc/config/genesis
        env:
          - name: NUM_BOOTNODES
            value: "2"
          - name: P2P_PORT
            valueFrom:
              configMapKeyRef:
                name: rrrnet-opts
                key: P2P_PORT
          - name: BUCKET
            value: "fetlar-1-27c36a65-76c4-2cd2-7ade-29e63eb492db"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
          - sh
        args:
          - -cx
          - |
            set -e
            cat <<PYEND | python3
            import os, sys
            import base64, pathlib, subprocess, socket, json
            import requests, dns.resolver, dns.exception

            DATA_DIR = "/var/lib/quorum/node"
            URL_METADATA = "http://metadata.google.internal/computeMetadata"
            URL_SECRETS = "https://secretmanager.googleapis.com"

            NUM_BOOTNODES = int(os.environ["NUM_BOOTNODES"])
            P2P_PORT = int(os.environ["P2P_PORT"])
            BUCKET = os.environ["BUCKET"]

            GETHDIR = pathlib.Path(f"{DATA_DIR}/geth")

            PROJECT_ID = requests.get(
                f"{URL_METADATA}/v1/project/project-id",
                headers={"Metadata-Flavor": "Google"}).text

            TOKEN = requests.get(
                f"{URL_METADATA}/v1/instance/service-accounts/default/token",
                headers={"Metadata-Flavor": "Google"}).json()["access_token"]

            HOSTNAME = socket.gethostname()
            # this will break with ValueError on a non bootnode
            POD_INDEX = int(HOSTNAME.rsplit("-", 1)[-1])
            KEY_INDEX = NUM_BOOTNODES + POD_INDEX

            def init(token, projectid, keyindex, datadir):

                URL_SECRETS = "https://secretmanager.googleapis.com"

                # genesis identities will need careful handling. bootnodes will
                # always be genesis identities.
                if GETHDIR.joinpath("LOCK").is_file():
                    print(f"geth LOCK file exists assuming init ok: {datadir}/geth/LOCK")
                    return True

                keyname = f"qnode-{keyindex}-key"
                pubname = f"qnode-{keyindex}-enode"
                print(f"keyname: {keyname}, pubname: {pubname}")

                resp = requests.get(
                    f"{URL_SECRETS}/v1/projects/{projectid}/secrets/{keyname}/versions/latest:access",
                    headers={"Authorization": f"Bearer {token}"})

                if not resp:
                    print(f"failed getting private key: {str(resp)}", file=sys.stderr)
                    return False

                key = base64.b64decode(resp.json()["payload"]["data"]).decode()
                resp = requests.get(
                    f"{URL_SECRETS}/v1/projects/{projectid}/secrets/{pubname}/versions/latest:access",
                    headers={"Authorization": f"Bearer {token}"})

                if not resp:
                    print(f"failed getting public key (enode): {str(resp)}", file=sys.stderr)
                    return False

                enode = base64.b64decode(resp.json()["payload"]["data"]).decode()

                # Make the directory so we can put the key in the place where geth
                # expects it by default.
                pathlib.Path(f"{datadir}/geth").mkdir(parents=True, exist_ok=True)
                # if the key file exists and is not the same abort. operations will
                # need to decide what to do with the disc data
                with open(pathlib.Path(f"{datadir}/geth/nodekey"), "w") as keyfile:
                    keyfile.write(key)

                subprocess.check_call(
                    ["geth", "init", "--datadir", datadir, "/etc/config/genesis/genesis.json"])

                # We only cache this so that we can set it in the --bootnodes geth
                # option
                with open(pathlib.Path(f"{datadir}/enode"), "w") as enodefile:
                    enodefile.write(enode)

                # paranoid check that the nodekey is as we expect
                with open(pathlib.Path(f"{datadir}/geth/nodekey")) as keyfile:
                    localkey = keyfile.read()
                    if localkey != key:
                        print("geth init overwrote the nodekey", file=sys.stderr)
                        return False
                print("geth init ok")
                return True

            if not init(TOKEN, PROJECT_ID, KEY_INDEX, DATA_DIR):
                sys.exit(1)

            # Now we need to wait for at least one bootnode whose blob ip
            # matches the dns ip
            token = requests.get(
                f"{URL_METADATA}/v1/instance/service-accounts/default/token",
                headers={"Metadata-Flavor": "Google"}).json()["access_token"]

            # Always prefer the ip from cluster dns. the public key is always taken from
            # the blob as that will only change if we are re-creating the whole chain.
            bootips = dict()
            try:
                ans = dns.resolver.resolve("bootnode.queth.svc.cluster.local", "a")
                bootips = dict([(a.address, None) for a in ans])
                if not ans:
                    print(f"bootstrap nodes not available", file=sys.stderr)
                    sys.exit(1)
            except dns.exception.DNSException as e:
                print(
                    f"bootstrap nodes not available (will try any known seed nodes): {str(e)}",
                    file=sys.stderr)
                sys.exit(1)

            bootnodes = []

            for i in range(NUM_BOOTNODES):
                objectname = f"bootnodes/bootnode-{i}-enode"
                qs = f"https://storage.googleapis.com/{BUCKET}/{objectname}?alt=media"
                resp = requests.get(qs, headers={"authorization": f"Bearer {token}"})

                if not resp:
                    print(f"{objectname}: {str(resp)} {qs}")
                    continue

                j = resp.json()
                ip, enode = j["ip"], j["enode"]
                if ip not in bootips:
                    print(f"stale ip from blob: {ip} for {enode}")
                    continue
                bootnodes.append((enode, ip))

            if not len(bootnodes):
                print("No bootnodes found, exiting")
                sys.exit(1)
            with open(f"{DATA_DIR}/BOOTNODES", "w") as f:
                f.write(",".join([f"enode://{enode}@{ip}:{P2P_PORT}" for enode, ip in bootnodes]))
            print(bootnodes)
            PYEND
